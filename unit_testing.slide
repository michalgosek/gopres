# Testowanie jednostkowe w Go 

Michał Gosek
7 Grudzień 2020
 
www.michalgosek.com
m.gosek@samsung.com

## Agenda
- Definicja jednostki testu
- Reguła FIRST 
- Struktura testu
- Konwencje nazewnicze 
- Moje sugestie
- Bonus

.image images/agenda.gif

## Sekcja 1: Definicja testu jednostkowego
## 

"Test jednostkowy to metoda testowania tworzonego oprogramowania poprzez wykonywanie testów weryfikujących 
    poprawność działania pojedynczych elementów (jednostek) programu – np. metod lub obiektów w programowaniu 
    obiektowym, lub procedur w programowaniu proceduralnym. Testowany fragment programu poddawany jest testowi, 
    który wykonuje go i porównuje wynik (np. zwrócone wartości, stan obiektu, zgłoszone wyjątki) z oczekiwanymi 
    wynikami – tak pozytywnymi, jak i negatywnymi (niepowodzenie działania kodu w określonych sytuacjach również 
    może podlegać testowaniu)."  _Źródło: https://pl.wikipedia.org/wiki/Test_jednostkowy_



.image images/first.png

## Czy nie da się prościej?     
.image images/face.png


##
 
1. Test jednostkowy, to kod, który wykonuje inny kod w zakresie jednego procesu w pamięci. 
W celu sprawdzenia, czy testowana logika działa według określonych załozeń. 

2. Wynik testu pozostaje zawsze taki sam bez względu na środowisko na którym został uruchomiony. 
Jednocześnie nie wymaga od programisty jego dalszej weryfikacji. 

 
**Test weryfikują, czy kod działa tak jak chce programista, a nie czy tak jak powinien!**

## Sekcja 2: Reguła FIRST  

##
**Fast (szybki)** - czas wykonania nie powinien przekraczać 1s. W przypadku testów średnich (tj. integracyjnych) czas oczekiwania na zakończenie testu może być już dłuższy. 

**Independent (niezależny)** - wynik jednego testu, nie powinien zależeć od wyniku, który został zwrócony przez poprzedni test. Tym samym kolejność ich wykonywania nie powinna być przyczyną niepowodzenia wykonywanego zestawu testów (test suite). 

**Repeatable (powtarzalny)** -  test powinien zawsze zwracać ten sam wynik dla tych samych danych wejściowych. 

**Self-validating (jednoznaczny)** -  wynik testu powinien być przejrzysty i jego weryfikacja nie powinna wymagać od nas podejmowania dodatkowych kroków (tj. dodatkowy self-check, na przykład czy dokument został faktycznie dodany z określonym polem do kolekcji).

##
**Timely (tworzony przed rozpoczęciem implementacji)**  -  zgodnie z podejściem TDD przed rozpoczęciem pisania rzeczywistej implementacji powinniśmy w pierwszej kolejności zacząć od napisania testu, który z załozenia ma nie przechodzić. 


**Readable (czytelny)** - składnia testu powinna być zrozumiała i nie wymagającą dodatkowej analizy ze strony programisty (tj. brak dodatkowych instrukcji warunkowych, weryfikacja kilku wyników jednocześnie).  


## Sekcja 3: Konwencje nazewnicze   
##

Przede wszystkim **spójne** na poziome całego projektu, zespołu bądź firmy. 
Pozwoli to na łatwiejszą adaptację w przypadku przejęcia nowego repozytorium.

Dobra nazwa testu caseu powinna odpowiadać na trzy pytania:
1. Jaka metoda będzie wykonywała test?
2. Jaki jest scenariusz, który chcemy przetestować?
3. Jaki jest oczekiwany rezultat po zakończeniu wykonywania testu?

## 

W celu czytelnego odseparowania nazw poszczególnych scenariuszy testowych 
możemy skorzystać z prefixu zawartego w nazwie test caseu. 

Dla scenariuszy poztywynych, tak zwanych happy path korzystajmy z prefixu **positive**
Dla scenariuszy negatywnych, wybierzmy **negative**.

**Nazwa testu nie powinna zawierać tylko nazwy funkcji albo feature'a, który zamierzamy przetestować.** 

W ten sposób ograniczamy jej kontekst przez co staje się nie jasna.

**Przykłady:**

positive_validation_success

negative_data_prase_failed

## 

**Nie zaleca się z umieszczenia w nazwach testów słów takich jak: must, correct, valid etc.**

Pamiętaj, ze to co dzisiaj jest must, jutro może być już nie aktualne. 
Zamiast tego skorzystaj z bezpieczniejszej alternatywy jaką jest should.
W nazwie powinniśmy zawrzeć konkretne wymagania, czyli jasno sprecyzować
dla których warunków test powinien się zakończyć pozytywnie lub nie. 

**Przykłady:**

positive_should_pass_for_metric_query_with_3_data_points
negative_should_return_false_when_token_value_is_nil

Kolejne podejście, które równiez uzwanane jest za poprawne pozwala nam podzielić nazwę 
caseu za pomocą sekcji: given, when oraz then. 

**Przykład:** 

given_metric_query_with_12_data_points_when_validate_then_passes


## Sekcja 4: Moje sugestie

##


1. Korzystaj z mapy, a nie slice'a structów do definiowania test caseów. Dzięki czemu zachowasz
zgodność z zasadą niezalezności, a dodatkowo wpłyniesz na czytelność testu.
2. Nie sprawdzaj w ramach jednego testu kilku rezultatów. Zamiast tego skup się na jednym!
Resztę zostaw na osobne testy.
3. Stosuj zrozumiałe nazwy dla testów według jednej z ustalonych konwencji.
4. Upewnij się, że dobrze rozumiesz wymagania biznesowe po przez napisanie i przedstawienie 
testu zanim przejdziesz do pisania kodu. 

.image images/four.png

## Czas na live coding!

.image images/live.png



## Dziękuję za uwagę!

.image images/last.png

##  

Bibliografia:
1. https://dave.cheney.net/2019/05/07/prefer-table-driven-tests
2. https://devstyle.pl/2020/06/25/mega-pigula-wiedzy-o-testach-jednostkowych/

Obrazki:
1. https://github.com/ashleymcnamara/gophers